C언어
컴파일러 : 프로그래밍 언어로 작성된 프로그램을 기계어로 변역하는 역할이다.
기계어 : 컴퓨터가 이해할 수 있는 0과 1로 구성된 형태 언어
제어구조 : 순차구조, 선택구조, 반복구조
추상화 -> 알고리즘 -> 프로그래밍
알고리즘 종류
    자연어
    의사코드
    순서도
알고리즘 조건
    유한성
    명확성
    수행가능성
    입력 (0개 이상)
    출력 (1개 이상)

#include <stdio.h>
// # : 전처리기 지시어
// 헤더 파일: 프로그램에 필요한 함수, 매크로, 변수 선언 등을 모아둔 파일 (끝이 .h로 끝남)
// Stdio :: Standard Input Output (표준 입출력)

	int main(void){               // main() 시작
	  printf("Hello World!");     //출력
	  return 0;                   //return문
	}

- **include:** 뒤에 나오는 헤더 파일을 C 프로그램에 포함하라는 명령어
- **헤더 파일**
    
    **→ 표준 라이브러리:** 기본적으로 만들어진 표준 함수들의 모임 (`#include <>`)
    
    **→ 사용자 정의:** 사용자가 만든 함수들의 모임 (`#include ""`)
    
    - ***#include <Stdio.h> → 헤더파일***
        - **include:** 뒤에 나오는 헤더 파일을 C 프로그램에 포함하라는 명령어
        - **# : 전처리기 지시어**
            - 코드 → **전처리** → 컴파일 → 결과
            - c컴파일러가 코드를 컴파일하기 전 미리 할 작업
        - **헤더파일**
            - 표준 라이브러리
                
                ```c
                #includ <~.h>
                ```
                
                표준함수들의 모임
                
                표준함수: 미리 만들어져서 기본적으로 제공되는 것들 ex) printf …
                
            - 사용자 정의
                
                ```c
                #include “~.h”
                ```
                
                사용자가 만들어 둔 헤더파일
                
            
    - ***서식문자***
        
        
        | 서식문자 | 출력 대상 | 출력형태 |
        | --- | --- | --- |
        | %d | char, short, int | 부호⭕️ 10진수 정수 |
        | %ld | long | 부호⭕️ 10진수 정수 |
        | %lld | long long | 부호⭕️ 10진수 정수 |
        | %u | unsigned int | 부호❌ 10진수 정수 |
        | %o | unsigned int | 부호❌ 8진수 정수 |
        | %x, %X | unsigned int | 부호❌ 16진수 정수 |
        | %f | float, double | 10진수 방식의 부동소수점 실수 |
        | %Lf | long double | 10진수 방식의 부동소수점 실수 |
        | %e, %E | float, double | e또는 E방식의 부동소수점 실수 |
        | %g, %G | float, double | 소수점 표시와 지수 표시 중 더 간결한 방식으로 표시 |
        | %c | char, short, int | 문자 |
        | %s | str * | 문자열 |
        | %p | void * | 포인터의 주소 값 |
    - ***정렬***
        
        %nd:   n자리로 채우고 왼쪽 정렬
        %-nd: n자리로 채우고 오른쪽 정렬
        
        서식문자 사이 들어가는 숫자(n) : 필드의 폭을 의미
        
    - ***printf(”Hello World\n”) → 출력 코드***
        
        ```c
        int num = 0; ...
        printf("%d", num);
        printf("%d %d", num1, num2); // 두개 출력할때
        ```

fgets 구문

> **str**
배열 이름
> 

> **sizeof(str)**
배열 길이
> 

> **stdin**
standard input, 키보드 입력을 받음
>

char str[6];

scanf("%s", str); 
// 공백 전까지 입력
fgets(str, sizeof(str), stdin); 
// 공백 포함 


# 포인터

### ***포인터***

값에 집적 접근하는게 아니라, 메모리 주소를 통해서 간접적으로 접근하는 것

- 포인터가 가리키는 데이터의 자료형과 무관하게 포인터 변수의 크기는 4byte
- +, -, 증감연산 가능

```c
//선언 
int *p = &a;
//출력
printf("%p", &a);
```

- int *p
    
    
    **int**
    
    포인터가 가리키는 객체의 자료형
    
    *** (애스터리스크)**
    
    포인터 변수를 생성해준다는 의미
    
    **p**
    
    포인터의 이름
    
- &a
    
    
    **&(앰퍼센드)**
    
    - 주소 연산자로, 변수의 주소를 반환해준다.
    
    **a**
    
    - 주소를 지정할 변수의 이름
    

포인터는 주소를 받기 때문에 항상 4바이트

---

### ***역참조연산자***

주소에 저장된 값을 반환한다.

```c
p = 20;
//p라는 포인터의 주소에 저장된 값을 20으로 변경
printf(”%p %p”, &a, p);
//주소 출력
```

포인터를 선언만 한 후, 값을 할당하지 않으면 쓰레기값이 들어가지만 안전하게 선언 하려면, 

변수를 가르키지 않고 포인터를 선언해야할 때, 초기화를 하지 않는게 아니라 NULL을 적는다.

```c
int *p=NULL
```

- 대문자로 작성해야 한다
- 헤더파일 있어야 사용 가능 <stdio.h>

‘\0’과 NULL의 차이

|  | **‘\0’** | **NULL** |
| --- | --- | --- |
| **이름** | 널문자 | 널포인터상수 |
| **자료형** | char | void* |
| **실제값** | O | X |
| **사용 용도** | 문자열의 끝 |  |

---

### ***포인터 +, -***

- 포인터에 +를 하면 **다음 번지의 방**을 가리킨다.
- 포인터의 -를 하면 **이전 번지의 방**을 가리킨다.

```c
int a=7;
int *p = &a;
*p = *p +3;            //*p+=3과 동일
printf("%p", "%d",p,a) //
```

```c
int a[5]={1,3,5};
배열의 이름 = 배열의 시작주소를 가리키는 **상수** 포인터
```

배열 ::  증감연산자 사용 불가 - 변수 자체의 값이 바뀌기 때문

p = a = &a[0]

p+1 = a+1 = &a[1]

p[0] = *p = a[0]

*(p+1) = a[1] = *(++p)

[ ][ ] = *[ ] = **

---

### ***포인터배열과 배열포인터***

**포인터배열**

배열

```c
int *a[5];
```

- 포인터들로 이루어진 배열
- 2차원 배열보다 공간 낭비가 적다

 **배열포인터**

포인터

```c
int (*a)[7]
```

- 포인터배열과 다른 개념

f(n)에서 n = 5일때,

f(5) = 5 + f(4)↴

                 f(4) = 4 + f(3)↴

                                  f(3) = 3 + f(2)↴

                                                      f(2) = 2 + f(1)↴

                                                                       f(1) = 1

f(5) = 15